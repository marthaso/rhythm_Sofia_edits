% Function name: aMap

% Function Summary: This code will run when the user is in the activation
% time map GUI and chooses to build and plot an activation map.

% Inputs: The only inputs we need are 
% data: optical mapping data (256,256,5000) usually
% stat: start time of AP rise
% endp: end time of AP rise
% rect: rectangle selected by user if a regional map is desired
% Fs: sampling frequency
% bg: background image of the FOV
% we don't use the other inputs with the new code. might erase them later.

% Outputs: A matrix the size of your FOV with values starting at 1 showing
% when each pixel depolarizaes wrt the first one. A figure will be created
% plotting this, the user can save it if wanted.

function [aMap1,mask3] = aMap(data,stat,endp,rect,Fs,bg,cmap,movie_scrn, handles) 

%% Get a mask to get rid of background. Can upload one or clean one using the maskfix function.
mask3 = uigetfile('C:\Users\Sofia\Desktop\Rhythm (2)\Rhythm\rhythm_try2\mask3_new.txt');
mask3 = load(mask3);

%% Multiply your data by the mask to get rid of background.
data = data.*mask3;

%% Get the aMap depending on what the user wants
choice = menu('Average act map or 1 AP map?','Average','One');
if choice==1 
    [aMap1] = averaged_amap(data,Fs); % get an aMap that is an average of multiple APs
else 
    stat=round(stat*Fs); % we need to change the timepoint to number of sample by multiplying it by sampling frequency
    endp=round(endp*Fs);
    [aMap1] = activationmap(stat, Fs, endp, data); % get an aMap of only one beat   
end

% mask3 = maskfix(aMap1);

%% If they selected a specific area, only display that area
% Make a mask of 1s in the selected rectangle. 0 everywhere else.
mask_ROI = zeros(size(mask3));
mask_ROI(rect(2):rect(2)+rect(4),rect(1):rect(1)+rect(3)) = 1;

% Set values to 0 outside of the rect
aMap1(mask_ROI == 0) = nan;
aMap1(aMap1 == 0) = nan;
offset1 = min(min(aMap1));
aMap1 = aMap1 - offset1*ones(size(aMap1,1),size(aMap1,2));

%% Plot it
figure;
% First plot the gray background
G = real2rgb(bg, 'gray');
imagesc(G)
hold on
% % Ask the user if they want isolines or not
% isolines = menu('Draw Isolines?','Yes','No');
% if isolines == 1
%     % Right now, isolines is set to maximum act. time divided by 2 (1 line every 2 ms). Can
%     % change this number if you want more or less lines. 
%     contourf(aMap1,max(max(aMap1))/2,'LineColor','k');
% else
%     % no isolines.
%     contourf(aMap1,max(max(aMap1)),'LineColor','none');
% end
% colormap (flipud(jet));
% c=colorbar;
% axis off
% title('Activation Map')
% c.Label.String = 'Activation Time (ms)';

% Don't ask user, just do two figures
contourf(aMap1,max(max(aMap1))/2,'LineColor','k');
colormap (flipud(jet));
c=colorbar;
axis off
title('Activation Map')
c.Label.String = 'Activation Time (ms)';

figure;
G = real2rgb(bg, 'gray');
imagesc(G)
hold on
contourf(aMap1,max(max(aMap1)),'LineColor','none');
colormap (flipud(jet));
c=colorbar;
axis off
title('Activation Map')
c.Label.String = 'Activation Time (ms)';

%% Clean up activation map

% Check all neighbors. If at least 4 of them are more than 10 msec different. Set
% pixel to NA. 

for i = 2:255
    for j = 2:255
        our_pixel = aMap1(i,j);
        neighbor1 = aMap1(i-1, j-1);
        neighbor2 = aMap1(i, j-1);
        neighbor3 = aMap1(i+1, j-1);
        neighbor4 = aMap1(i-1, j);
        neighbor5 = aMap1(i+1, j);
        neighbor6 = aMap1(i-1, j+1);
        neighbor7 = aMap1(i, j+1);
        neighbor8 = aMap1(i+1, j+1);
        dif1 = abs(our_pixel - neighbor1);
        dif2 = abs(our_pixel - neighbor2);
        dif3 = abs(our_pixel - neighbor3);
        dif4 = abs(our_pixel - neighbor4);
        dif5 = abs(our_pixel - neighbor5);
        dif6 = abs(our_pixel - neighbor6);
        dif7 = abs(our_pixel - neighbor7);
        dif8 = abs(our_pixel - neighbor8);
        difs = [dif1, dif2, dif3, dif4, dif5, dif6, dif7, dif8];
        counter = 0;
        for p = 1:numel(difs)
            if difs(p) > 10
                counter = counter + 1;
            end
        end
        if counter >= 4
            aMap1(i,j) = NaN;
        
        end
    end
end

figure;
G = real2rgb(bg, 'gray');
imagesc(G)
hold on
contourf(aMap1,max(max(aMap1)),'LineColor','none');
colormap (flipud(jet));
c=colorbar;
axis off
title('Activation Map')
c.Label.String = 'Activation Time (ms)';

% Check all neighbors. If at least 4 of them are NaN, turn to NaN. Will
% have to think what to do about edges.
numofneighbors = 4;

for i = numofneighbors+1:256-numofneighbors
    for j = numofneighbors+1:256-numofneighbors
        if isnan(aMap1(i,j))
            neighbors =[];
            for t = 1:numofneighbors
                neighbor1 = aMap1(i-t, j-t);
                neighbor9 = aMap1()
                neighbor2 = aMap1(i, j-t);
                neighbor3 = aMap1(i+t, j-t);
                neighbor4 = aMap1(i-t, j);
                neighbor5 = aMap1(i+t, j);
                neighbor6 = aMap1(i-t, j+t);
                neighbor7 = aMap1(i, j+t);
                neighbor8 = aMap1(i+t, j+t);
                neighbors = [neighbors, neighbor1, neighbor2, neighbor3, neighbor4, neighbor5, neighbor6, neighbor7, neighbor8];
            end
            meanvalue = nanmean(neighbors);
            aMap1(i,j) = meanvalue;
        end

    end
end

aMap1 = aMap1.*mask3;
aMap1(aMap1==0) = NaN;

figure;
G = real2rgb(bg, 'gray');
imagesc(G)
hold on
contourf(aMap1,max(max(aMap1)),'LineColor','none');
colormap (flipud(jet));
c=colorbar;
axis off
title('Activation Map')
c.Label.String = 'Activation Time (ms)';



%%%%% PREVIOUS CODE %%%%%
% figure
% G = real2rgb(bg, 'gray');
% imagesc(G)
% hold on
% contourf(aMap1,max(max(aMap1)),'LineColor','none')
% imagesc(data_avg, 'AlphaData', mask3)
% colormap(flipud(jet));
% c = colorbar;
% 
% % Add isolines if asked for
% 
% 
% 
% % Plot Map
% if size(data,3) ~= 1
%     handles.activeCamData.saveData = actMap1;
%     handles.activeCamData.savePicks = pickId+stat;
%     G = handles.activeCamData.bgRGB;
%     N = size(G, 1);
%     M = size(G, 2);
% 
%     set(gca,'xtick',[])
% 
%     G = real2rgb(bg, 'gray');
%     imagesc(G)
%     hold on
% 
% 
%     f = figure('visible', 'off');
%     colormap(cmap);
%     contourf(actMap1,handles.numOfContourLevels-1,'LineColor','none');
%     frame = getframe();
%     close(f);
%     J = imresize(frame.cdata, [N, M],'nearest');
%     J = double(J) / 255.;
%     J = flipud(J);
% 
%     set(gca,'xtick',[])
% 
%     mask_ROI=repmat(mask_ROI,[1 1 3]);
%     I = J .* mask_ROI + G .* (1 - mask_ROI);
% 
%     cla(movie_scrn);
%     image(I,'Parent',movie_scrn);
% 
% 
%     set(movie_scrn,'YDir','reverse');
%     set(movie_scrn,'YTick',[],'XTick',[]);
% end
% % First choose if you want an averaged map or a single beat map
% 
% % need to choose the area to display. 
% 
% % display
% 
% 
% 
% 
% 
% 
% 
% %% Code
% 
% if stat == 0
%     stat = 1; % Subscript indices must either be real positive integers or logicals, aka don't start at 0
% end
% % Create initial variables
% stat=round(stat*Fs);
% endp=round(endp*Fs);
% % Code not used in current version %
% % % actMap = zeros(size(data,1),size(data,2));
% % % mask2 = zeros(size(data,1),size(data,2));
% 
% % identify channels that have been zero-ed out due to noise
% if size(data,3) == 1
%     temp = data(:,stat:endp);       % Windowed signal
%     temp = normalize_data(temp);    % Re-normalize data in case of drift
%     mask = max(temp,[],2) > 0;      % Generate mask
% else
%     temp = data(:,:,stat:endp);     % Windowed signal
%     % Make sure that there any minimal activation is there
%     masknan=max(temp,[],3) -min(temp,[],3)<0.15;    
%     [~,mid]=max(temp,[],3);
%     masknan(mid<20)=1;
%     temp = normalize_data(temp);    % Re-normalize data in case of drift    
%     mask = max(temp,[],3) > 0;      % Generate mask
% 
% end
% 
% % Code not used in current version %
% % % % % Remove non-connected artifacts
% % % % CC = bwconncomp(mask,4);
% % % % numPixels = cellfun(@numel,CC.PixelIdxList);
% % % % [~,idx] = max(numPixels);
% % % % mask_id = CC.PixelIdxList{idx};
% % % % mask2(mask_id) = 1;
% 
% % Find First Derivative and time of maxium
% if size(data,3) == 1
%     temp2 = diff(temp,1,2);
%     [~,max_i] = max(temp2,[],2);
% else
%     %windowSize = 3; 
%     %b = (1/windowSize)*ones(1,windowSize);
%     %a = 1;
%     %temp = filter(b,a,temp);    
%     temp2 = diff(temp,1,3); % first derivative
%     [~,max_i] = max(temp2,[],3); % find location of max derivative
%     max_i(masknan)=nan;
%     %[~,max_i] = findpeaks( temp2,'MinPeakDistance',minBetweenActivation,'MinPeakHeight',minPace);
% end
% 
% 
% 
% 
% % Activation Map Matrix
% actMap1 = max_i.*mask;
% 
% mask_ROI = zeros(size(mask));
% mask_ROI(rect(2):rect(2)+rect(4),rect(1):rect(1)+rect(3)) = 1;
% 
% actMap1(mask_ROI == 0) = nan;
% actMap1(actMap1 == 0) = nan;
% 
% pickId=actMap1;
% 
% offset1 = min(min(actMap1));
% actMap1 = actMap1 - offset1*ones(size(actMap1,1),size(actMap1,2));
% actMap1 = actMap1/Fs*1000; %% time in ms
% 
% % Plot Map
% if size(data,3) ~= 1
%     handles.activeCamData.saveData = actMap1;
%     handles.activeCamData.savePicks = pickId+stat;
%     G = handles.activeCamData.bgRGB;
%     N = size(G, 1);
%     M = size(G, 2);
% 
%     set(gca,'xtick',[])
% 
%     G = real2rgb(bg, 'gray');
%     imagesc(G)
%     hold on
% 
% 
%     f = figure('visible', 'off');
%     colormap(cmap);
%     contourf(actMap1,handles.numOfContourLevels-1,'LineColor','none');
%     frame = getframe();
%     close(f);
%     J = imresize(frame.cdata, [N, M],'nearest');
%     J = double(J) / 255.;
%     J = flipud(J);
% 
%     set(gca,'xtick',[])
% 
%     mask_ROI=repmat(mask_ROI,[1 1 3]);
%     I = J .* mask_ROI + G .* (1 - mask_ROI);
% 
%     cla(movie_scrn);
%     image(I,'Parent',movie_scrn);
% 
% 
%     set(movie_scrn,'YDir','reverse');
%     set(movie_scrn,'YTick',[],'XTick',[]);
% end
% 
%           handles.activeCamData.meanresults = sprintf('Mean:');
%           handles.activeCamData.medianresults = sprintf('Median:');
%           handles.activeCamData.SDresults = sprintf('S.D.:');
%           handles.activeCamData.num_membersresults = sprintf('#Members:');
%           handles.activeCamData.angleresults =sprintf('Angle:');
% end
% 
% 
% 
% 
